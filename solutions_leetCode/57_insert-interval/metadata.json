{
  "id": 1207392085,
  "question_id": 57,
  "lang": "java",
  "lang_name": "Java",
  "timestamp": 1710779651,
  "status": 10,
  "status_display": "Accepted",
  "runtime": "2 ms",
  "url": "/submissions/detail/1207392085/",
  "is_pending": "Not Pending",
  "title": "Insert Interval",
  "memory": "44.9 MB",
  "code": "class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n\n        if(intervals.length==0){\n            return new int[][] {{newInterval[0],newInterval[1]}};\n        }\n          int pos = -1;\n\n        for (int i = 0; i < intervals.length; i++) {\n\n            if (intervals[i][0] > newInterval[0]) {\n                pos = i;\n                break;\n            }\n        }\n\n        if (pos == -1)\n            pos = intervals.length;\n\n        List<List<Integer>> ls = new ArrayList<>();\n        int n = 0;\n\n        while (n < intervals.length) {\n\n            if (n < pos) {\n                ls.add(Arrays.asList(intervals[n][0], intervals[n][1]));\n            } else if (n == pos) {\n\n                if (ls.isEmpty() || ls.get(ls.size() - 1).get(1) < newInterval[0])\n                    ls.add(Arrays.asList(newInterval[0], newInterval[1]));\n                else\n                    ls.get(ls.size() - 1).set(1, Math.max(ls.get(ls.size() - 1).get(1), newInterval[1]));\n\n                    if (ls.get(ls.size() - 1).get(1) < intervals[pos][0])\n                    ls.add(Arrays.asList(intervals[pos][0], intervals[pos][1]));\n                else\n                    ls.get(ls.size() - 1).set(1, Math.max(ls.get(ls.size() - 1).get(1), intervals[pos][1]));\n            } else if (n > pos) {\n\n                if (ls.get(ls.size() - 1).get(1) < intervals[n][0])\n                    ls.add(Arrays.asList(intervals[n][0], intervals[n][1]));\n                else\n                    ls.get(ls.size() - 1).set(1, Math.max(ls.get(ls.size() - 1).get(1), intervals[n][1]));\n                \n            }\n            n++;\n        }\n        if(pos==intervals.length){\n                if (ls.isEmpty() || ls.get(ls.size() - 1).get(1) < newInterval[0])\n                    ls.add(Arrays.asList(newInterval[0], newInterval[1]));\n                else\n                    ls.get(ls.size() - 1).set(1, Math.max(ls.get(ls.size() - 1).get(1), newInterval[1]));\n}\n\n        int ans[][] = new int[ls.size()][2];\n\n        for (int i = 0; i < ls.size(); i++) {\n            ans[i][0] = ls.get(i).get(0);\n            ans[i][1] = ls.get(i).get(1);\n        }\n        return ans;\n    \n    }\n}",
  "title_slug": "insert-interval",
  "has_notes": false,
  "flag_type": 1
}
