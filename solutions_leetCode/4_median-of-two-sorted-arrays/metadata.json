{
  "id": 1157624584,
  "question_id": 4,
  "lang": "java",
  "lang_name": "Java",
  "timestamp": 1706291530,
  "status": 10,
  "status_display": "Accepted",
  "runtime": "1 ms",
  "url": "/submissions/detail/1157624584/",
  "is_pending": "Not Pending",
  "title": "Median of Two Sorted Arrays",
  "memory": "45.8 MB",
  "code": "class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        // Size of two given arrays\n        int n1 = nums1.length;\n        int n2 = nums2.length;\n\n        int n = n1 + n2; //total size\n        //required indices:\n        int ind2 = n / 2;\n        int ind1 = ind2 - 1;\n        int cnt = 0;\n        int ind1el = -1, ind2el = -1;\n\n        //apply the merge step:\n        int i = 0, j = 0;\n        while (i < n1 && j < n2) {\n            if (nums1[i] < nums2[j]) {\n                if (cnt == ind1) ind1el = nums1[i];\n                if (cnt == ind2) ind2el = nums1[i];\n                cnt++;\n                i++;\n            } else {\n                if (cnt == ind1) ind1el = nums2[j];\n                if (cnt == ind2) ind2el = nums2[j];\n                cnt++;\n                j++;\n            }\n        }\n\n        //copy the left-out elements:\n        while (i < n1) {\n            if (cnt == ind1) ind1el = nums1[i];\n            if (cnt == ind2) ind2el = nums1[i];\n            cnt++;\n            i++;\n        }\n        while (j < n2) {\n            if (cnt == ind1) ind1el = nums2[j];\n            if (cnt == ind2) ind2el = nums2[j];\n            cnt++;\n            j++;\n        }\n\n        //Find the median:\n        if (n % 2 == 1) {\n            return (double)ind2el;\n        }\n\n        return (double)((double)(ind1el + ind2el)) / 2.0;\n    }\n\n}",
  "title_slug": "median-of-two-sorted-arrays",
  "has_notes": false,
  "flag_type": 1
}
