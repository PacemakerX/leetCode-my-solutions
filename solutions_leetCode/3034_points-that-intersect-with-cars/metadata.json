{
  "id": 1207890999,
  "question_id": 3034,
  "lang": "java",
  "lang_name": "Java",
  "timestamp": 1710826600,
  "status": 10,
  "status_display": "Accepted",
  "runtime": "5 ms",
  "url": "/submissions/detail/1207890999/",
  "is_pending": "Not Pending",
  "title": "Points That Intersect With Cars",
  "memory": "44.2 MB",
  "code": "class Solution {\n    public int numberOfPoints(List<List<Integer>> nums) {\n\n        int count=0;\n        int[][] intervals = new int[nums.size()][2];\n        \n        for(int i=0;i<intervals.length;i++){\n            intervals[i][0]=nums.get(i).get(0);\n            intervals[i][1]=nums.get(i).get(1);\n        }\n\n        Arrays.sort(intervals, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n\n        nums.clear();\n        \n        \n        for(int i =0;i<intervals.length;i++){\n\n          if(nums.isEmpty() || nums.get(nums.size()-1).get(1)<intervals[i][0]){\n\n                nums.add(Arrays.asList(intervals[i][0],intervals[i][1]));\n          }\n          else\n            nums.get(nums.size()-1).set(1,Math.max(nums.get(nums.size()-1).get(1),intervals[i][1]));\n    \n        }\n\n        for(int i =0;i<nums.size();i++)\n            count+=(nums.get(i).get(1)-nums.get(i).get(0)+1);\n\n        return count;\n    }\n}",
  "title_slug": "points-that-intersect-with-cars",
  "has_notes": false,
  "flag_type": 1
}
